# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

font_family      Hack Nerd Font Mono
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size 13.0

#: }}}

#: Cursor customization {{{
cursor #f8f8f2
cursor_text_color background
cursor_shape block
cursor_stop_blinking_after 0

#: }}}

#: Scrollback {{{

scrollback_lines 20000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

#: }}}

#: Terminal bell {{{

enable_audio_bell no
visual_bell_duration 0.25
visual_bell_color #383830
bell_on_tab yes

#: }}}

#: Window layout {{{

remember_window_size  yes

enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the https://sw.kovidgoyal.net/kitty/overview/#layouts.

window_resize_step_cells 2
window_resize_step_lines 2

#: The step size (in units of cell width/cell height) to use when
#: resizing kitty windows in a layout with the keyboard
#: (start_resizing_window). The cells value is used for horizontal
#: resizing and the lines value for vertical resizing.

window_border_width 0.5pt

#: The width of window borders. Can be either in pixels (px) or pts
#: (pt). Values in pts will be rounded to the nearest number of pixels
#: based on screen resolution. If not specified the unit is assumed to
#: be pts. Note that borders are displayed only when more than one
#: window is visible. They are meant to separate multiple windows.

draw_minimal_borders yes

#: Draw only the minimum borders needed. This means that only the
#: minimum needed borders for inactive windows are drawn. That is only
#: the borders that separate the inactive window from a neighbor. Note
#: that setting a non-zero window margin overrides this and causes all
#: borders to be drawn.

active_border_color none
inactive_border_color #383830
bell_border_color #f92672
hide_window_decorations yes
confirm_os_window_close 0

inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

#: }}}

#: Tab bar {{{

tab_bar_edge bottom

#: Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts)

tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar and
#: the second number is the margin between the tab bar and the
#: contents of the current tab.

tab_bar_style slant

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color (see tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file
#: separator
#:     Tabs are separated by a configurable separator (see tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators
#:     (see tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also `this discussion
#:     <https://github.com/kovidgoyal/kitty/discussions/4447>`_ for examples from
#:     kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a
#:     mapping for the https://sw.kovidgoyal.net/kitty/actions/#select-tab
#:     action which presents you with a list of tabs and allows for easy
#:     switching to a tab.

tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown

tab_powerline_style slanted

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, or round.

tab_activity_symbol none

#: Some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces surround the text with quotes.

tab_title_template "{title}"

#: A template to render the tab title. The default just renders the
#: title. If you wish to include the tab-index as well, use something
#: like: {index}: {title}. Useful if you have shortcuts mapped for
#: goto_tab N. If you prefer to see the index as a superscript, use
#: {sup.index}. In addition you can use {layout_name} for the current
#: layout name, {num_windows} for the number of windows in the tab and
#: {num_window_groups} for the number of window groups (not counting
#: overlay windows) in the tab. Note that formatting is done by
#: Python's string formatting machinery, so you can use, for instance,
#: {layout_name[:2].upper()} to show only the first two letters of the
#: layout name, upper-cased. If you want to style the text, you can
#: use styling directives, for example:
#: {fmt.fg.red}red{fmt.fg.default}normal{fmt.bg._00FF00}green
#: bg{fmt.bg.tab}. Similarly, for bold and italic:
#: {fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}.

active_tab_title_template none

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

active_tab_foreground   #f9f8f2
active_tab_background   #272822
active_tab_font_style   bold-italic
inactive_tab_foreground #75715e
inactive_tab_background #49483e
inactive_tab_font_style normal
tab_bar_background #383830

#: }}}

#: Color scheme {{{
foreground #f8f8f2
background #272822
selection_foreground none
selection_background none

#: The color table {{{

color0  #272822
color1  #f92672
color2  #a6e22e
color3  #e6db74
color4  #66d9ef
color5  #ae81ff
color6  #a1efe4
color7  #f8f8f2
color8  #75715e
color9  #f92672
color10 #a6e22e
color11 #e6db74
color12 #66d9ef
color13 #ae81ff
color14 #a1efe4
color15 #f8f8f2

# mark1_foreground black
# mark1_background #98d3cb

#: Color for marks of type 1

# mark2_foreground black
# mark2_background #f2dcd3

#: Color for marks of type 2

# mark3_foreground black
# mark3_background #f274bc

#: Color for marks of type 3

#: }}}

#: }}}

#: Advanced {{{

allow_remote_control yes
listen_on unix:/tmp/mykitty

update_check_interval 0

#: Periodically check if an update to kitty is available. If an update
#: is found a system notification is displayed informing you of the
#: available update. The default is to check every 24 hrs, set to zero
#: to disable. Changing this option by reloading the config is not
#: supported.

startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/overview/#startup-sessions in the
#: kitty documentation for details. Note that relative paths are
#: interpreted with respect to the kitty config directory. Environment
#: variables in the path are expanded. Changing this option by
#: reloading the config is not supported.

allow_hyperlinks yes

#: Process hyperlink (OSC 8) escape sequences. If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click by with the mouse or the hints kitten
#: </kittens/hints>. The special value of ``ask`` means that kitty
#: will ask before opening the link when clicked.

shell_integration enabled

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells.  Set to
#: ``disabled`` to turn off shell integration, completely. See
#: https://sw.kovidgoyal.net/kitty/shell-integration/ for details.

env SHELL_SESSIONS_DISABLE=1

#: }}}

#: OS specific tweaks {{{

macos_quit_when_last_window_closed yes

macos_thicken_font 0.5

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes. For example, a value of
#: 0.75 will result in rendering that looks similar to sub-pixel
#: antialiasing at common font sizes.

macos_show_window_title_in all

#: Show or hide the window title in the macOS window or menu-bar. A
#: value of window will show the title of the currently active window
#: at the top of the macOS window. A value of menubar will show the
#: title of the currently active window in the macOS menu-bar, making
#: use of otherwise wasted space. all will show the title everywhere
#: and none hides the title in the window and the menu-bar.

#: }}}

#: Keyboard shortcuts {{{

kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

action_alias

#: E.g. action_alias launch_tab launch --type=tab --cwd=current

#: Define aliases to avoid repeating the same options in multiple
#: mappings. Aliases can be defined for any action. Aliases are
#: expanded recursively. For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::

#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs

#: Similarly, to alias kitten invocation::

#:     action_alias hints kitten hints --hints-offset=0

kitten_alias

#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above but, specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

#: Clipboard {{{

#: Copy to clipboard

map kitty_mod+c copy_to_clipboard

#::  There is also a copy_or_interrupt action that can be optionally
#::  mapped to Ctrl+c. It will copy only if there is a selection and
#::  send an interrupt otherwise. Similarly,
#::  copy_and_clear_or_interrupt will copy and clear the selection or
#::  send an interrupt if there is no selection.

#: Paste from clipboard

map kitty_mod+v paste_from_clipboard

#: Paste from selection

map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection

#: Pass selection to program

map kitty_mod+o pass_selection_to_program

#::  You can also pass the contents of the current selection to any
#::  program using pass_selection_to_program. By default, the system's
#::  open program is used, but you can specify your own, the selection
#::  will be passed as a command line argument to the program, for
#::  example::

#::      map kitty_mod+o pass_selection_to_program firefox

#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::

#::      map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

#: Scroll line up

map kitty_mod+up    scroll_line_up
map kitty_mod+k     scroll_line_up
map opt+cmd+page_up scroll_line_up
map cmd+up          scroll_line_up

#: Scroll line down

map kitty_mod+down    scroll_line_down
map kitty_mod+j       scroll_line_down
map opt+cmd+page_down scroll_line_down
map cmd+down          scroll_line_down

#: Scroll page up

map kitty_mod+page_up scroll_page_up
map cmd+page_up       scroll_page_up

#: Scroll page down

map kitty_mod+page_down scroll_page_down
map cmd+page_down       scroll_page_down

#: Scroll to top

map kitty_mod+home scroll_home
map cmd+home       scroll_home

#: Scroll to bottom

map kitty_mod+end scroll_end
map cmd+end       scroll_end

#: Scroll to previous shell prompt

map kitty_mod+z scroll_to_prompt -1

#::  Use a parameter of zero for scroll_to_prompt to scroll to the
#::  last jumped to or the last clicked position. Requires
#::  https://sw.kovidgoyal.net/kitty/shell-integration/ to work.

#: Scroll to next shell prompt

map kitty_mod+x scroll_to_prompt 1

#: Browse scrollback buffer in pager

map kitty_mod+h show_scrollback

#::  You can pipe the contents of the current screen + history buffer
#::  as STDIN to an arbitrary program using the ``launch`` function.
#::  For example, the following opens the scrollback buffer in less in
#::  an overlay window::

#::      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#::  For more details on piping screen and buffer contents to external
#::  programs, see launch.

#: Browse output of the last shell command in pager

map kitty_mod+g show_last_command_output

#::  You can also define additional shortcuts to get the command
#::  output. For example, to get the first command output on screen::

#::      map f1 show_first_command_output_on_screen

#::  To get the command output that was last accessed by a keyboard
#::  action or mouse action::

#::      map f1 show_last_visited_command_output

#::  You can pipe the output of the last command run in the shell
#::  using the launch function. For example, the following opens the
#::  output in less in an overlay window::

#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#::  To get the output of the first command on the screen, use
#::  @first_cmd_output_on_screen. To get the output of the last jumped
#::  to command, use @last_visited_cmd_output.

#::  Requires https://sw.kovidgoyal.net/kitty/shell-integration/ to
#::  work.

#: }}}

#: Window management {{{

#: New window

map kitty_mod+enter new_window
map cmd+enter       new_window

#::  You can open a new window running an arbitrary program, for
#::  example::

#::      map kitty_mod+y      launch mutt

#::  You can open a new window with the current working directory set
#::  to the working directory of the current window using::

#::      map ctrl+alt+enter    launch --cwd=current

#::  You can open a new window that is allowed to control kitty via
#::  the kitty remote control facility by prefixing the command line
#::  with @. Any programs running in that window will be allowed to
#::  control kitty. For example::

#::      map ctrl+enter launch --allow-remote-control some_program

#::  You can open a new window next to the currently active window or
#::  as the first window, with::

#::      map ctrl+n launch --location=neighbor some_program
#::      map ctrl+f launch --location=first some_program

#::  For more details, see launch.

#: New OS window

map kitty_mod+n new_os_window
map cmd+n       new_os_window

#::  Works like new_window above, except that it opens a top level OS
#::  kitty window. In particular you can use new_os_window_with_cwd to
#::  open a window with the current working directory.

#: Close window

map kitty_mod+w close_window
map shift+cmd+d close_window

#: Next window

map kitty_mod+] next_window

#: Previous window

map kitty_mod+[ previous_window

#: Move window forward

map kitty_mod+f move_window_forward

#: Move window backward

map kitty_mod+b move_window_backward

#: Move window to top

map kitty_mod+` move_window_to_top

#: First window

map kitty_mod+1 first_window
map cmd+1       first_window

#: Second window

map kitty_mod+2 second_window
map cmd+2       second_window

#: Third window

map kitty_mod+3 third_window
map cmd+3       third_window

#: Fourth window

map kitty_mod+4 fourth_window
map cmd+4       fourth_window

#: Fifth window

map kitty_mod+5 fifth_window
map cmd+5       fifth_window

#: Sixth window

map kitty_mod+6 sixth_window
map cmd+6       sixth_window

#: Seventh window

map kitty_mod+7 seventh_window
map cmd+7       seventh_window

#: Eight window

map kitty_mod+8 eighth_window
map cmd+8       eighth_window

#: Ninth window

map kitty_mod+9 ninth_window
map cmd+9       ninth_window

#: Tenth window

map kitty_mod+0 tenth_window

#: Visually select focus window

map kitty_mod+f7 focus_visible_window

#: Visually swap window with another

map kitty_mod+f8 swap_with_window

#: }}}

#: Tab management {{{

#: Next tab

map kitty_mod+right next_tab
map shift+cmd+]     next_tab
map ctrl+tab        next_tab

#: Previous tab

map kitty_mod+left previous_tab
map shift+cmd+[    previous_tab
map ctrl+shift+tab previous_tab

#: New tab

map kitty_mod+t new_tab
map cmd+t       new_tab

#: Close tab

map kitty_mod+q close_tab
map cmd+w       close_tab

#: Close OS window

map shift+cmd+w close_os_window

#: Move tab forward

map kitty_mod+. move_tab_forward

#: Move tab backward

map kitty_mod+, move_tab_backward

#: }}}

#: Layout management {{{

#: Next layout

map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: There is also a toggle layout function that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open URL

map kitty_mod+e open_url_with_hints

#::  Open a currently visible URL using the keyboard. The program used
#::  to open the URL is specified in open_url_with.

#: Insert selected path

map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Use for
#::  the output of things like: ls -1

#: Insert selected word

map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

map kitty_mod+p>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses sha1 hashes to identify
#::  commits

#: Open the selected file at the selected line

map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  vim at the specified line number.

#: Open the selected hyperlink

map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

#: Unicode input

map kitty_mod+u    kitten unicode_input
map ctrl+cmd+space kitten unicode_input

#: Edit config file

map kitty_mod+f2 edit_config_file
map cmd+,        edit_config_file

#: Open the kitty command shell

map kitty_mod+escape kitty_shell window

#::  Open the kitty shell in a new window/tab/overlay/os_window to
#::  control kitty using commands.

#:: vim-kitty-navigator
map ctrl+j kitten pass_keys.py neighboring_window bottom ctrl+j
map ctrl+k kitten pass_keys.py neighboring_window top    ctrl+k
map ctrl+h kitten pass_keys.py neighboring_window left   ctrl+h
map ctrl+l kitten pass_keys.py neighboring_window right  ctrl+l

map ctrl+/ new_window_with_cwd

#: }}}

